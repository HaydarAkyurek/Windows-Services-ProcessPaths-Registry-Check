# === INSTALLATION & USAGE ===
# 1. Save this script as enhanced_service_checker.py
# 2. Run it with:
#    python enhanced_service_checker.py

import subprocess
import os
import platform
import tkinter as tk
from tkinter import messagebox, filedialog
from datetime import datetime

# ----------------------
# Define default Windows services (sample list)
# ----------------------
def default_services():
    return {
        'AeLookupSvc', 'Appinfo', 'AppMgmt', 'AudioSrv', 'BITS', 'BrokerInfrastructure',
        'CertPropSvc', 'CoreMessagingRegistrar', 'CryptSvc', 'DcomLaunch', 'Dhcp',
        'Dnscache', 'EventLog', 'EventSystem', 'FontCache', 'gpsvc', 'IKEEXT',
        'iphlpsvc', 'LanmanServer', 'LanmanWorkstation', 'lmhosts', 'Netman', 'NlaSvc',
        'PlugPlay', 'Power', 'RpcSs', 'Schedule', 'SENS', 'ShellHWDetection', 'Spooler',
        'Themes', 'Winmgmt'
    }

# ----------------------
# Functions to get current services and details
# ----------------------

def get_current_services():
    services = set()
    result = subprocess.run(["sc", "query", "type=", "service", "state=", "all"], capture_output=True, text=True)
    for line in result.stdout.splitlines():
        line = line.strip()
        if line.startswith("SERVICE_NAME:"):
            service_name = line.split("SERVICE_NAME:")[1].strip()
            services.add(service_name)
    return services

# NOTE: We use SERVICE_NAME as the primary identifier because **DisplayName is not unique**.
# Multiple services can have identical or similar display names, but SERVICE_NAME is always unique.


def get_service_details(service_name):
    result = subprocess.run(["sc", "qc", service_name], capture_output=True, text=True)
    details = {
        'SERVICE_NAME': service_name,
        'DisplayName': '',
        'BinaryPath': '',
        'StartType': ''
    }

    for line in result.stdout.splitlines():
        line = line.strip()
        if line.startswith("DISPLAY_NAME"):
            details['DisplayName'] = line.split("DISPLAY_NAME")[1].strip()
        elif line.startswith("BINARY_PATH_NAME"):
            details['BinaryPath'] = line.split("BINARY_PATH_NAME")[1].strip()
        elif line.startswith("START_TYPE"):
            start_type = line.split("START_TYPE")[1].strip()
            details['StartType'] = start_type

    return details

# ----------------------
# GUI Functions
# ----------------------

def scan_services():
    current = get_current_services()
    extras = current - default_services()
    listbox_services.delete(0, tk.END)
    global extra_service_details
    extra_service_details = []

    for svc in sorted(extras):
        details = get_service_details(svc)
        listbox_services.insert(tk.END, f"{svc}  |  {details['DisplayName']}")
        extra_service_details.append(details)

def show_service_details(event):
    selection = listbox_services.curselection()
    if selection:
        index = selection[0]
        details = extra_service_details[index]

        text_details.delete(1.0, tk.END)
        output = (
            f"SERVICE_NAME : {details['SERVICE_NAME']}\n"
            f"Display Name : {details['DisplayName']}\n"
            f"Binary Path  : {details['BinaryPath']}\n"
            f"Start Type   : {details['StartType']}\n"
        )
        text_details.insert(tk.END, output)

def save_results():
    if not extra_service_details:
        messagebox.showinfo("No Data", "Please scan services first.")
        return

    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
    if file_path:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write("===============================\n")
            f.write(" Windows Extra Services Report\n")
            f.write("===============================\n\n")
            f.write(f"Generated on: {datetime.now()}\n")
            f.write(f"Running on: {platform.platform()}\n\n")
            f.write("Found extra (non-default) services:\n\n")
            f.write("{:<25} {:<40} {:<10} {}\n".format('SERVICE_NAME', 'DisplayName', 'StartType', 'BinaryPath'))
            f.write("-"*120 + "\n")

            for details in extra_service_details:
                f.write("{:<25} {:<40} {:<10} {}\n".format(
                    details['SERVICE_NAME'], details['DisplayName'], details['StartType'], details['BinaryPath']
                ))

            f.write("\nTotal extra services found: {}\n".format(len(extra_service_details)))
            f.write("Generated by: Windows Extra Services Checker\n")

        messagebox.showinfo("Saved", f"Results saved to {file_path}")

def check_windows_version():
    version = platform.platform()
    if "Windows" not in version:
        messagebox.showerror("Error", "This tool is designed for Windows only.")
        root.destroy()
    return version

# ----------------------
# GUI Setup
# ----------------------
root = tk.Tk()
root.title("Windows Extra Services Checker (Enhanced)")
root.geometry("900x600")

version_info = check_windows_version()
extra_service_details = []

frame_buttons = tk.Frame(root)
frame_buttons.pack(pady=5)

btn_scan_services = tk.Button(frame_buttons, text="Scan Services", command=scan_services)
btn_scan_services.grid(row=0, column=0, padx=5)

btn_save = tk.Button(frame_buttons, text="Save Results", command=save_results)
btn_save.grid(row=0, column=1, padx=5)

listbox_services = tk.Listbox(root, height=15)
listbox_services.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
listbox_services.bind('<<ListboxSelect>>', show_service_details)

text_details = tk.Text(root, height=10)
text_details.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

lbl_info = tk.Label(root, text=f"Running on: {version_info}")
lbl_info.pack(pady=3)

root.mainloop()
